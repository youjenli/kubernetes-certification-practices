# https://github.com/dgkanatsios/CKAD-exercises/blob/main/j.podman.md

# Create a Dockerfile to deploy an Apache HTTP Server which hosts a custom main page
# 建立一個 Containerfile
# podman build -t httpd .

# Build and see how many layers the image consists of
# podman image inspect httpd

# Run the image locally, inspect its status and logs, finally test that it responds as expected
# podman run -d -p 8080:80 --name httpd-demo httpd
# 注意，所有參數都要擺在 httpd 前面

# Run a command inside the pod to print out the index.html file
# podman exec httpd-demo cat /usr/local/apache2/htdocs/index.html

# Tag the image with ip and port of a private local registry and then push the image to this registry

# 使用本地自簽 SSL 憑證的註冊表
# 參考以下教學將本地 5000 埠的容器映像檔儲存庫設定為 podman 可接受的不安全容器映像檔儲存庫
# https://podman-desktop.io/docs/containers/registries
# 在 windows 大致包含下列步驟：
# podman machine ssh # 登入 podman machine
# 調整 registries.conf 檔案
# podman tag httpd localhost:5000/httpd
# podman push localhost:5000/httpd

# 若使用第三方註冊表
# https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry_auth.html
# 建立在 education-repo 命名空間底下的 httpd ECR private repo，亦即建立 education-repo/httpd 檔案庫。
# 若只建立名為 education-repo 的檔案庫則推送映像像時將得到以下錯誤訊息:
# Error: writing blob: initiating layer upload to /v2/education-repo/httpd/blobs/uploads/ in
# 309434882382.dkr.ecr.us-west-2.amazonaws.com: name unknown: The repository with name
# 'education-repo/httpd' does not exist in the registry with id '309434882382'

# aws ecr get-login-password --region us-west-2 | podman login --username AWS --password-stdin 309434882382.dkr.ecr.us-west-2.amazonaws.com
# podman tag httpd 309434882382.dkr.ecr.us-west-2.amazonaws.com/education-repo/httpd
# podman push 309434882382.dkr.ecr.us-west-2.amazonaws.com/education-repo/httpd

# Verify that the registry contains the pushed image and that you can pull it
# curl http://localhost:5000/v2/_catalog # 考題解答
# 這題沒辦法先砍掉映像檔再拉下來，podman 會拒絕請求，理由是 podman 和 docker 會共用此本地映像檔儲存庫
# Content           : {"repositories":["httpd"]}

# Create a container without running/starting it
# podman container create busybox

# Export a container to output.tar file
# podman container ls -a # 要加 -a 才叫得出未執行的容器查 id
# podman export thirsty_hermann --output=output.tar
# 或是 podman container export --output="test.tar" e31fe94978ab

# Run a pod with the image pushed to the registry
# podman run -dt -p 8080:80 localhost/httpd
# podman run -dt -p 8080:80 309434882382.dkr.ecr.us-west-2.amazonaws.com/education-repo/httpd

# Log into a remote registry server and then read the credentials from the default file
# podman machine init
# 取得 AWS STS Tokens
# aws ecr get-login-password --region us-west-2 | podman login -u AWS --password-stdin 309434882382.dkr.ecr.us-west-2.amazonaws.com
# Get-Content $HOME/.config/containers/auth.json # Windows and mac
# echo ${XDG_RUNTIME_DIR}/containers/auth.json # UNIX-like
# https://docs.podman.io/en/v5.1.0/markdown/podman-login.1.html

# Create a secret both from existing login credentials and from the CLI
# kubectl create secret generic mysecret --from-file=.dockerconfigjson=$HOME/.config/containers/auth.json --type=kubernetes.io/dockeconfigjson
# kubectl create secret docker-registry my-secret --docker-server=309434882382.dkr.ecr.us-west-2.amazonaws.com/education-repo --docker-username=AWS --docker-password=$(aws ecr get-login-password --region us-west-2)
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# docker-server 路徑不能寫錯

# Create the manifest for a Pod that uses one of the two secrets just created to pull an image hosted on the relative private remote registry
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# k run busybox --image busybox --restart=Never --dry-run=client -o yaml > pod.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: httpd
  name: httpd
spec:
  containers:
  - image: 309434882382.dkr.ecr.us-west-2.amazonaws.com/education-repo/httpd
    name: httpd
    resources: {}
  imagePullSecrets:
    - name: my-secret
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

# Clean up all the images and containers
# k delete pod/httpd secret/reg
# 或是 k delete all -all
# podman rm --all --force
# podman rmi --all
