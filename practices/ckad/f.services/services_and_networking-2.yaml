# https://github.com/dgkanatsios/CKAD-exercises/blob/main/f.services.md
# Create a deployment called foo using image 'dgkanatsios/simpleapp' (a simple server that returns hostname) and 3 replicas. Label it as 'app=foo'.
# Declare that containers in this pod will accept traffic on port 8080 (do NOT create a service yet)
# k create deploy foo --image=dgkanatsios/simpleapp --replicas=3 --port=8080 --dry-run=client -o yaml > deploy.yaml
# 若是用這種方法建的 deploymen 會自動標記 app=foo。若無此標記可用 k label deploy app=foo --overwrite

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: foo
  name: foo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: foo
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: foo
    spec:
      containers:
      - image: dgkanatsios/simpleapp
        name: simpleapp
        ports:
        - containerPort: 8080
        resources: {}
status: {}

# Get the pod IPs. Create a temp busybox pod and try hitting them on port 8080
# k get po -o wide
# k run busybox --image=busybox --restart=Never --rm -it -- /bin/sh
# wget 10.244.0.4:8080

# Create a service that exposes the deployment on port 6262. Verify its existence, check the endpoints
# k expose deploy foo --port=6262 --target-port=8080
# k get svc foo # you will see ClusterIP as well as port 6262
# k get ep # you will see the IPs of the three replica pods, listening on port 8080

# Create a temp busybox pod and connect via wget to foo service. Verify that each time there's a different hostname returned. Delete deployment and services to cleanup the cluster
# k run busybox --image=busybox --restart=Never --rm -it -- /bin/sh
# wget -O- 10.104.145.47:6262

# Create an nginx deployment of 2 replicas, expose it via a ClusterIP service on port 80.
# Create a NetworkPolicy so that only pods with labels 'access: granted' can access the pods in this deployment and apply it
# k create deploy nginx -c=nginx --replicas=2 -o yaml # 不用 --port=80
# k expose deploy nginx --port=80
# k create networkpolicy np -o yaml --dry-run=client